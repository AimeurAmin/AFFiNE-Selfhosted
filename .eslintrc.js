const { join } = require('node:path');

/**
 * @type {import('eslint').Linter.Config}
 */
const config = {
  root: true,
  settings: {
    react: {
      version: 'detect',
    },
    next: {
      rootDir: 'packages/frontend/core',
    },
  },
  extends: [
    'eslint:recommended',
    'plugin:react-hooks/recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:@typescript-eslint/recommended',
    'prettier',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      globalReturn: false,
      impliedStrict: true,
      jsx: true,
    },
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: join(__dirname, 'tsconfig.eslint.json'),
  },
  plugins: [
    'react',
    '@typescript-eslint',
    'sonarjs',
    'import-x',
    'unused-imports',
    'rxjs',
    'unicorn',
  ],
  rules: {
    // enabled in oxlint
    'array-callback-return': 'off',
    'constructor-super': 'off',
    eqeqeq: 'off',
    'getter-return': 'off',
    'for-direction': 'off',
    'require-yield': 'off',
    'use-isnan': 'off',
    'valid-typeof': 'off',
    'no-self-compare': 'off',
    'no-empty': 'off',
    'no-constant-binary-expression': 'off',
    'no-constructor-return': 'off',
    'no-func-assign': 'off',
    'no-global-assign': 'off',
    'no-ex-assign': 'off',
    'no-fallthrough': 'off',
    'no-irregular-whitespace': 'off',
    'no-control-regex': 'off',
    'no-with': 'off',
    'no-debugger': 'off',
    'no-const-assign': 'off',
    'no-import-assign': 'off',
    'no-setter-return': 'off',
    'no-obj-calls': 'off',
    'no-unsafe-negation': 'off',
    'no-dupe-class-members': 'off',
    'no-dupe-keys': 'off',
    'no-this-before-super': 'off',
    'no-empty-character-class': 'off',
    'no-useless-catch': 'off',
    'no-async-promise-executor': 'off',
    'no-unreachable': 'off',
    'no-duplicate-case': 'off',
    'no-empty-pattern': 'off',
    'no-unused-labels': 'off',
    'no-sparse-arrays': 'off',
    'no-delete-var': 'off',
    'no-compare-neg-zero': 'off',
    'no-redeclare': 'off',
    'no-case-declarations': 'off',
    'no-class-assign': 'off',
    'no-var': 'off',
    'no-self-assign': 'off',
    'no-inner-declarations': 'off',
    'no-dupe-else-if': 'off',
    'no-invalid-regexp': 'off',
    'no-unsafe-finally': 'off',
    'no-prototype-builtins': 'off',
    'no-shadow-restricted-names': 'off',
    'no-nonoctal-decimal-escape': 'off',
    'no-constant-condition': 'off',
    'no-useless-escape': 'off',
    'no-unsafe-optional-chaining': 'off',
    'no-extra-boolean-cast': 'off',
    'no-regex-spaces': 'off',
    'react/jsx-no-useless-fragment': 'off',
    'react/no-unknown-property': 'off',
    'react/no-string-refs': 'off',
    'react/no-direct-mutation-state': 'off',
    'react/require-render-return': 'off',
    'react/jsx-no-undef': 'off',
    'react/jsx-no-duplicate-props': 'off',
    'react/jsx-key': 'off',
    'react/no-danger-with-children': 'off',
    'react/no-unescaped-entities': 'off',
    'react/no-is-mounted': 'off',
    'react/no-find-dom-node': 'off',
    'react/no-children-prop': 'off',
    'react/no-render-return-value': 'off',
    'react/jsx-no-target-blank': 'off',
    'react/jsx-no-comment-textnodes': 'off',
    'sonarjs/no-useless-catch': 'off',
    '@typescript-eslint/consistent-type-imports': 'off',
    '@typescript-eslint/no-unused-vars': 'off',
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/no-loss-of-precision': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/triple-slash-reference': 'off',
    '@typescript-eslint/no-non-null-asserted-optional-chain': 'off',
    '@typescript-eslint/no-duplicate-enum-values': 'off',
    '@typescript-eslint/no-extra-non-null-assertion': 'off',
    '@typescript-eslint/no-misused-new': 'off',
    '@typescript-eslint/prefer-for-of': 'off',
    '@typescript-eslint/no-unsafe-declaration-merging': 'off',
    '@typescript-eslint/no-this-alias': 'off',
    '@typescript-eslint/prefer-as-const': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/no-namespace': 'off',
    '@typescript-eslint/no-unnecessary-type-constraint': 'off',
    '@typescript-eslint/no-array-constructor': 'off',
    '@typescript-eslint/ban-types': 'off',
    // enable in typescript-eslint
    'no-undef': 'off',
    'no-cond-assign': 'off',
    'react/prop-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/await-thenable': 'error',
    '@typescript-eslint/require-array-sort-compare': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    '@typescript-eslint/prefer-for-of': 'error',
    'unused-imports/no-unused-imports': 'error',
    '@typescript-eslint/no-restricted-imports': [
      'error',
      {
        patterns: [
          {
            group: ['**/dist'],
            message: "Don't import from dist",
            allowTypeImports: false,
          },
          {
            group: ['**/src'],
            message: "Don't import from src",
            allowTypeImports: false,
          },
          {
            group: ['@blocksuite/store'],
            message: "Import from '@blocksuite/global/utils'",
            importNames: ['assertExists', 'assertEquals'],
          },
        ],
      },
    ],

    'sonarjs/no-all-duplicated-branches': 'error',
    'sonarjs/no-element-overwrite': 'error',
    'sonarjs/no-empty-collection': 'error',
    'sonarjs/no-extra-arguments': 'error',
    'sonarjs/no-identical-conditions': 'error',
    'sonarjs/no-identical-expressions': 'error',
    'sonarjs/no-ignored-return': 'error',
    'sonarjs/no-one-iteration-loop': 'error',
    'sonarjs/no-use-of-empty-return-value': 'error',
    'sonarjs/non-existent-operator': 'error',
    'sonarjs/no-collapsible-if': 'error',
    'sonarjs/no-same-line-conditional': 'error',
    'sonarjs/no-duplicated-branches': 'error',
    'sonarjs/no-collection-size-mischeck': 'error',
    'sonarjs/no-identical-functions': 'error',
    'rxjs/finnish': [
      'error',
      {
        functions: false,
        methods: false,
        strict: true,
        types: {
          '^LiveData$': true,
          // some yjs classes are Observables, but they don't need to be in Finnish notation
          '^Doc$': false, // yjs Doc
          '^Awareness$': false, // yjs Awareness
          '^UndoManager$': false, // yjs UndoManager
        },
      },
    ],
  },
  overrides: [
    {
      files: [
        `packages/**/*.{ts,tsx,js,mjs}`,
        'tools/cli/**/*.{ts,tsx,js,mjs}',
      ],
      rules: {
        '@typescript-eslint/no-floating-promises': [
          'error',
          {
            ignoreVoid: false,
            ignoreIIFE: false,
          },
        ],
        '@typescript-eslint/no-misused-promises': ['error'],
        '@typescript-eslint/prefer-readonly': 'error',
        'import-x/no-extraneous-dependencies': ['error'],
        'react-hooks/exhaustive-deps': [
          'warn',
          {
            additionalHooks:
              '(useAsyncCallback|useCatchEventCallback|useDraggable|useDropTarget|useRefEffect)',
          },
        ],
      },
    },
    {
      files: [
        '**/__tests__/**/*',
        '**/*.stories.tsx',
        '**/*.spec.ts',
        '**/tests/**/*',
        'scripts/**/*',
        '**/benchmark/**/*',
        '**/__debug__/**/*',
        '**/e2e/**/*',
      ],
      rules: {
        '@typescript-eslint/no-floating-promises': 0,
        '@typescript-eslint/no-misused-promises': 0,
        '@typescript-eslint/no-restricted-imports': 0,
      },
    },
    {
      files: ['packages/frontend/apps/electron/scripts/**/*'],
      rules: {
        'import-x/no-extraneous-dependencies': 'off',
      },
    },
  ],
};

module.exports = config;
